#import core;

#include "opcodes.ela"
#compiler_flags "-g"

current_destination: s64;

                        // Arguments.
#alias NativeFunction :: Value(Value[]*, Value[]*)*;

print :: (args: Value[]*, address_space: Value[]*) -> Value {
  value: Value;
  for arg; *args {
    println($"{get_value(arg, address_space)}");
  }
  return value;
}

abs :: (args: Value[]*, address_space: Value[]*) -> Value {
  arg := ~(*args);
  println($"arg: {arg}");  
  if arg.type == .Integer {
    return make_int_operand(abs(arg.value.v_int));
  } else if arg.type == .Float {
    return make_float_operand(fabs(arg.value.v_float));
  } else {
    println("Cannot use 'abs' on non-numerical types");
    exit(1);
    return {};
  }
}

get_destination :: () -> s64 {
  return current_destination++;
}

execute_tac :: (codes: TAC[]*) -> Value[] {
  // This is a map because we use negative indices.
  
  native_functions: NativeFunction[];
  init_native_functions :: () {
    native_functions ~= &print; // * This never gets called but since we use negative indices turned absolute theres' no way to access 0 index.
    native_functions ~= &print;
    native_functions ~= &abs;
  }
  
  init_native_functions();
  
  values := #make(Value[], codes.length);
  
  stack_ptr: u16 = 0;
  stack: Value[65536];
  return_address: s64;
  
  argument_stack: Value[256];
  argument_stack_ptr: u8;
  
  ip: s64;
  
  push :: (value: Value) {
    stack[stack_ptr] = value;
    stack_ptr++;
    if stack_ptr >= 65536 {
      printf("Stack overflow in bitcode interpreter.\n");
      exit(1);
    }
  }
  
  pop :: () -> Value {
    stack_ptr--;
    value := stack[stack_ptr];
    return value;
  }
  
  call_native_function :: (addr: s64) {
    func : NativeFunction = native_functions[addr];
    if func {
      arguments : Value[];
      while argument_stack_ptr > 0 {
        arguments ~= get_value(argument_stack[argument_stack_ptr], &values);
        argument_stack_ptr--;
      }
      value := func(&arguments, &values);
      values[return_address] = value;
      return_address = -1;
    } else {
      printf("Attempted to call a non-existent native function.. %ld\n", addr);
      exit(1);
    }
  }

  while ip < codes.length {
    code := (*codes)[ip];
    
    if code.op == .Halt then break;
    
    // Stack && Functions
    if is_stack_or_function_operator(code.op) {
      switch code.op {
        .PushArg: {
          argument_stack[argument_stack_ptr] = get_value(code.left, &values);
          argument_stack_ptr++;
        }
        .PopArg: {
          value := get_value(argument_stack[argument_stack_ptr], &values);
          argument_stack_ptr--;
          values[code.destination] = value;
        }
        .Push: {
          push(get_value(code.left, &values));
        }
        .Pop: {
          values[code.destination] = pop();
          if stack_ptr < 0 {
            printf("Stack underflow\n");
            exit(1);
          }
        }
        .Call: {
          address := get_value(code.left, &values);
          push(make_int_operand(ip));
          func_addr := address.value.v_int;
          return_address = code.destination;
          if func_addr < 0 {
            // we take the absolute here to avoid using a map for simple indices.
            call_native_function(abs(func_addr));
            ip++;
          } else {
            ip = func_addr;
          }
          continue;
        }
        .Return: {
          values[return_address] = pop();
          value := pop();
          if value.type != .Integer {
            ip = value.value.v_int;
          } else {
            printf("Attempted to pop an instruction pointer address off the stack that wasn't an integer\n");
            exit(1);
          }
          continue;
        }
        .ReturnVoid: {
          value := pop();
          if value.type != .Integer {
            ip = value.value.v_int;
          } else {
            printf("Attempted to pop an instruction pointer address off the stack that wasn't an integer\n");
            exit(1);
          }
          return_address = -1;
          continue;
        }
      }
    } else if is_control_flow_operator(code.op) {
      switch code.op {
        .Jump:  {
          ip = code.destination;
          continue;
        }
        .BrEq:  {
          target := get_value(code.left, &values);
          expected := get_value(code.right, &values);
          
          equals := false;
          if target.type == .Integer && expected.type == .Integer {
            equals = target.value.v_int == expected.value.v_int;
          } else if target.type == .Float && expected.type == .Float {
            equals = target.value.v_float == expected.value.v_float;
          }
          
          if equals {
            ip = code.destination;
            continue;
          }
        }
        .BrNeq: {
          target := get_value(code.left, &values);
          expected := get_value(code.right, &values);
          
          equals := false;
          if target.type == .Integer && expected.type == .Integer {
            equals = target.value.v_int != expected.value.v_int;
          } else if target.type == .Float && expected.type == .Float {
            equals = target.value.v_float != expected.value.v_float;
          }
          
          if equals {
            ip = code.destination;
            continue;
          }
        }
        .BrLt:  {
          target := get_value(code.left, &values);
          expected := get_value(code.right, &values);
          equals := false;
          if target.type == .Integer && expected.type == .Integer {
            equals = target.value.v_int < expected.value.v_int;
          } else if target.type == .Float && expected.type == .Float {
            equals = target.value.v_float < expected.value.v_float;
          }
          
          if equals {
            ip = code.destination;
            continue;
          }
        }
        .BrGt:  {
          target := get_value(code.left, &values);
          expected := get_value(code.right, &values);
          equals := false;
          
          if target.type == .Integer && expected.type == .Integer {
            equals = target.value.v_int > expected.value.v_int;
          } else if target.type == .Float && expected.type == .Float {
            equals = target.value.v_float > expected.value.v_float;
          }
          
          if equals {
            ip = code.destination;
            continue;
          }
        }
      }
    } else if is_binary_operator(code.op) {
      lvalue := get_value(code.left, &values);
      rvalue := get_value(code.right, &values);
      
      switch code.op {
        .Assign: { 
          values[code.destination] = get_value(code.left, &values);
        }
        .Add: { 
          if lvalue.type == .Integer && rvalue.type == .Integer {
            values[code.destination] = make_int_operand(lvalue.value.v_int + rvalue.value.v_int);
          } else if lvalue.type == .Float && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_float + rvalue.value.v_float);
          } else if lvalue.type == .Integer && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_int + rvalue.value.v_float);
          } else if lvalue.type == .Float && rvalue.type == .Integer {
            values[code.destination] = make_float_operand(lvalue.value.v_float + rvalue.value.v_int);
          }
        }
        .Sub: {
          if lvalue.type == .Integer && rvalue.type == .Integer {
            values[code.destination] = make_int_operand(lvalue.value.v_int - rvalue.value.v_int);
          } else if lvalue.type == .Float && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_float - rvalue.value.v_float);
          } else if lvalue.type == .Integer && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_int - rvalue.value.v_float);
          } else if lvalue.type == .Float && rvalue.type == .Integer {
            values[code.destination] = make_float_operand(lvalue.value.v_float - rvalue.value.v_int);
          }
        }
        .Mul: { 
          if lvalue.type == .Integer && rvalue.type == .Integer {
            values[code.destination] = make_int_operand(lvalue.value.v_int * rvalue.value.v_int);
          } else if lvalue.type == .Float && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_float * rvalue.value.v_float);
          } else if lvalue.type == .Integer && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_int * rvalue.value.v_float);
          } else if lvalue.type == .Float && rvalue.type == .Integer {
            values[code.destination] = make_float_operand(lvalue.value.v_float * rvalue.value.v_int);
          }
        }
        .Div: { 
          if lvalue.type == .Integer && rvalue.type == .Integer {
            values[code.destination] = make_int_operand(lvalue.value.v_int / rvalue.value.v_int);
          } else if lvalue.type == .Float && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_float / rvalue.value.v_float);
          } else if lvalue.type == .Integer && rvalue.type == .Float {
            values[code.destination] = make_float_operand(lvalue.value.v_int / rvalue.value.v_float);
          } else if lvalue.type == .Float && rvalue.type == .Integer {
            values[code.destination] = make_float_operand(lvalue.value.v_float / rvalue.value.v_int);
          }
        }
      }
    } else {
      printf("Recieved an invalid operation... %s\n", operator_names[code.op].data);
    }
    
    ip++;
  }
  
  return values;
}

print_id := -1;
abs_id := -2;

test_while_loop :: () -> TAC[] {
  codes: TAC[];

  /* 
  
      MOV EAX, 0
      
    BEGIN_LOOP:
      JLT 100, LOOP_BODY
      HLT
      
    LOOP_BODY:
      ADD EAX, 1
      JUMP BEGIN_LOOP
      
  */

  //? [0]
  //* i = 0;
  codes ~= make_assign(make_int_operand(0), 0);

  //? [1]
  //* while i < 100, jump -> 3;
  codes ~= make_binary(3, .BrLt,
    make_ref_operand(0),
    make_int_operand(100)
  );

  //? [2]
  //* End of loop (when i >= 100)
  codes ~= make_nullary(.Halt);

  //? [3]
  //* i += 1
  codes ~= make_binary(0, .Add,
    make_ref_operand(0),
    make_int_operand(1) // add 1 to *0;
  );
  
  //? [4]
  codes ~= make_push_arg(make_ref_operand(0));
  
  //? [5]
  codes ~= make_call(make_int_operand(abs_id), 0);

  //? [6]
  //* Jump back to the condition check
  codes ~= make_unary(1, .Jump);

  return codes;
}

main :: () {
  get_operator_names();
  codes := test_while_loop();
  values := execute_tac(&codes);
  i : int;
  for result; values {
    println($"result: (*{i}) :: ({result})");
    i++;
  }
}
