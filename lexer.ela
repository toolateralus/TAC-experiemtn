#import core;
#import interned_string;

ttype_name_cache: string[];

TType :: enum {
  Invalid,
  Eof,
  Identifier,
  /* 
    * Literals
  */
  Integer,
  String,

  /* 
    * Punctuation 
  */
  LCurly,
  RCurly,
  LParen,
  RParen,
  Semi,

  /* 
    * Operators 
  */
  Add,
  Sub,
  Mul,
  Div,
  Modulo,
  Assign,
  
  /* Comparison operators. */
  Equals,
  NotEquals,
  LessThan,
  LessThanEquals,
  GreaterThan,
  GreaterThanEquals,
  LogicalOr,
  LogicalAnd,
  
  /* Bitwise operators */
  ShiftLeft,
  ShiftRight,
  And,
  Or,
  Xor,
    
  /* Unary operators */
  LogicalNot,
  Not,
}

is_operator :: (type: int) -> bool {
  return type >= .Add && type <= .Not;
}

is_binary_operator :: (type: int) -> bool { 
  return type >= .Add && type <= .Xor;
}

is_unary_operator :: (type: int) -> bool {
  return type >= .LogicalNot && type <= .Not;
}


Token :: struct {
  value:        InternedString;
  filename:     InternedString;
  line:         s64;
  column:       s64;
  type:         int = 0;
  
  to_string :: () -> string {
    return $"value: - {value.value()} -, {filename.value()}:{line}:{column}, (type: {ttype_name_cache[type]} :: {type})";
  }
}

token_eof :: () -> Token {
  tok: Token;
  tok.type = .Eof;
  return tok;
}

make_token :: (slice: string, line: s64, column, type: int, filename: InternedString) -> Token {
  token: Token;
  token.value = #make(InternedString, slice);
  token.line = line;
  token.column = column;
  token.type = type;
  token.filename = filename;
  return token;
}

make_operator :: (slice: string, line: s64, column, filename: InternedString) -> Token {
  token: Token;
  token.value = #make(InternedString, slice);
  token.line = line;
  token.column = column;
  token.filename = filename;
  
  token.type = switch slice {
    
    string{"&&"}:   { return .LogicalAnd; }
    string{"||"}:   { return .LogicalOr; }
    string{"<<"}:   { return .ShiftLeft; }
    string{">>"}:   { return .ShiftRight; }
    string{"=="}:  { return .Equals; }
    string{"!="}:  { return .NotEquals; }
    string{"<"}:   { return .LessThan; }
    string{"<="}:  { return .LessThanEquals; }
    string{">"}:   { return .GreaterThan; }
    string{">="}:  { return .GreaterThanEquals; }
    string{"+"}:   { return .Add; }
    string{"-"}:   { return .Sub; }
    string{"/"}:   { return .Div; }
    string{"*"}:   { return .Mul; }
    string{"="}:   { return .Assign; }
    string{"~"}:  { return .Not; }
    string{"!"}:  { return .LogicalNot; }
    string{"%"}:   { return .Modulo; }
    string{"^"}:   { return .Xor; }
    string{"|"}:   { return .Or; }
    string{"&"}:   { return .And; }
    string{"("}:   { return .LParen; }
    string{")"}:   { return .RParen; }
    string{"{"}:   { return .LCurly; }
    string{"}"}:   { return .RCurly; }
    string{";"}:   { return .Semi; }
  }
  
  return token;
}

LookaheadBuffer :: struct {
  buffer: Token[8];
  index: int;
  push :: (token: Token) {
    if index >= 8 {
      printf("Pushed too many tokens into the lookahead buffer");
    }
    
    buffer[index] = token;
    index++;
  }
  pop :: () -> Token {
    if index <= 0 {
      printf("Popped empty lookahead buffer\n");
      exit(1);
    }
    
    token := buffer[0];
    for i in 0..(index-1) {
      buffer[i] = buffer[i + 1];
    }
    index--;
    return token;
  }
  
  #operator([]) :: (n: int) -> Token {
    return buffer[n];
  }
}

Lexer :: struct {
  #ctor :: (input: string, filename) {
    this.input = input;
    this.filename = #make(InternedString, filename);
    length = input.length;
    
    type := #type(TType);
    for field; type.fields {
      ttype_name_cache ~= field.name;
    }
  }

  position : int;
  line     : s64       = 1;
  column   : s64       = 1;
  input    : string;
  filename : InternedString;
  length   : s64;
  buffer   : LookaheadBuffer;
  in_fill  : bool;
  
  peek :: (n: int = 0) -> Token {
    return buffer[n];
  }
  
  eat :: () -> Token {
    
    while !in_fill && buffer.index < 8 {
      in_fill = true;
      buffer.push(eat());
      in_fill = false;
    }
    
    if !in_fill {
      if buffer[0].type == .Eof {
        return token_eof();
      }
      return buffer.pop();
    }
    
    if position >= length
      then return token_eof();

    while position < length {
      c : char = input[position];
      
      if c == 0 {
        return token_eof();
      }
      
      if c == #char "\n" {
        column = 1;
        position++;
        line++;
        continue;
      }
      if c == #char " " {
        position++;
        column++;
        continue;
      }
      start := position;

      get_slice :: () -> string {
        return {&input[start], &input[position]};
      }

      advance :: () {
        position++;
        c = input[position];
        column++;
      }

      backtrack :: () {
        position--;
        c = input[position];
        column--;
      }

      get_longest_matching_operator :: () -> Token {
        last_match: Token;
        while position < length && ispunct(c) {
          advance();
          slice := get_slice();
          match := make_operator(slice, line, column, filename);
          if match.type != .Invalid {
            last_match = match;
          } else {
            backtrack();
            break;
          }
        }

        if last_match.type == .Invalid {
          println($"Failed to lex operator {get_slice()}");
          exit(1);
        }
        return last_match;
      }
    
      if isalpha(c) {
        while position < length && isalpha(c) || c == #char "_" || isdigit(c) {
          advance();
        }
        slice := get_slice();
        return make_token(slice, line, column, .Identifier, filename);
      } else if isdigit(c) {
        while position < length && isdigit(c) || c == #char "_" {
          advance();
        }
        slice := get_slice();
        return make_token(slice, line, column, .Integer, filename);
      } else if ispunct(c) {
        return get_longest_matching_operator();
      } else {
        str : char[2];
        str[0] = c;
        str[1] = #char "\0";
        printf("Failed to lex character: int='%d', char='%c' | str='%s'\n", c, c, (char*)str);
        println("\e[033mNote: if the single quotes are empty, we couldn't print this character or string\e[0m");
        exit(1);
      }
    }

    return token_eof();
  }
  
  expect :: (type: int) -> Token {
    tok := peek(0);
    if tok.type == type {
      return eat();
    } else {
      newline := "\n";
      println($"Unexpected token: {tok}{newline} expeected: {ttype_name_cache[type]}");
      exit(1);
      return token_eof();
    }
  }
}
