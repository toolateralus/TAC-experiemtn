Operator :: enum {
  Halt,
  Assign,
  Add,
  Sub,
  Mul,
  Div,
  BrEq,
  BrNeq,
  BrLt,
  BrGt,
  Jump,
  
  Push,
  Pop,
  
  Call,
  Return,
  ReturnVoid,
}

operator_names: string[];
 
get_operator_names :: () {
  type := #type Operator;
  for field; type.fields {
    operator_names ~= field.name;
  }
}

ValueUnion :: union {
  v_float: float64;
  v_int: s64;
  // refers another code.
  v_reference: s64;
}

ValueTag :: enum {
  Reference,
  Integer,
  Float,
  Alloc,
}

Value :: struct {
  type: int;
  value: ValueUnion;
  to_string :: () -> string {
    if type == ValueTag.Integer {
      return $"{value.v_int}";
    } else if type == ValueTag.Reference {
      return $"*{value.v_reference}";
    } 
    return "Invalid Value";
  }
}

get_value :: (op : Value, results: Value[]*) -> Value {
  if op.type == ValueTag.Reference {
    return (*results)[op.value.v_reference];
  } else {
    return op;
  }
}

TAC :: struct {
  left: Value;
  right: Value;
  destination: s64;
  op: s32;
  to_string :: () -> string {
    return $"left: {left}, right: {right}, destination: {destination}, operator: {operator_names[op]}";
  }
}

make_float_operand :: (f: float64) -> Value {
  value: ValueUnion;
  value.v_float = f;
  return {
    ValueTag.Float,
    value
  };
}

make_int_operand :: (i: s64) -> Value {
  value: ValueUnion;
  value.v_int = i;
  return {
    ValueTag.Integer,
    value
  };
}

make_ref_operand :: (dest: s64) -> Value {
  value: ValueUnion;
  value.v_reference = dest;
  return {
    ValueTag.Reference,
    value
  };
}

make_assign :: (value: Value, destination: s64) -> TAC {
  code: TAC;
  code.left = value;
  code.op = .Assign;
  code.destination = destination;
  return code;
}

make_binary :: (destination: s64, op: int, left: Value, right: Value) -> TAC {
  code: TAC;
  code.left = left;
  code.right = right;
  code.destination = destination;
  code.op = op;
  return code;
}

make_nullary :: (op: int) -> TAC {
  code: TAC;
  code.op = op;
  return code;
}

make_unary :: (destination: s64, op: int) -> TAC {
  code: TAC;
  code.op = op;
  code.destination = destination;
  return code;
}

make_push :: (operand: Value) -> TAC {
  code: TAC;
  code.op = .Push;
  code.left = operand;
  return code;
}

make_pop :: (destination: s64) -> TAC {
  code: TAC;
  code.op = .Pop;
  code.destination = destination;
  return code;
}

make_call :: (address: Value, return_addr: s64) -> TAC {
  code: TAC;
  code.left = address;
  code.destination = return_addr;
  code.op = .Call;
  return code;
}